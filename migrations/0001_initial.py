# Generated by Django 2.1.2 on 2018-10-23 07:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CSSR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('complexity', models.IntegerField()),
                ('length', models.IntegerField()),
                ('structure', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'cssr',
            },
        ),
        migrations.CreateModel(
            name='CSSRAnnot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.CharField(max_length=20)),
                ('gene_name', models.CharField(max_length=20)),
                ('location', models.SmallIntegerField(choices=[(1, 'CDS'), (2, 'exon'), (3, '3UTR'), (4, 'intron'), (5, '5UTR')])),
                ('cssr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.CSSR')),
            ],
            options={
                'db_table': 'cssrannot',
            },
        ),
        migrations.CreateModel(
            name='CSSRMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left_flank', models.CharField(max_length=100)),
                ('right_flank', models.CharField(max_length=100)),
                ('cssr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.CSSR')),
            ],
            options={
                'db_table': 'cssrmeta',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxonomy', models.CharField(max_length=20)),
                ('species_name', models.CharField(max_length=255)),
                ('common_name', models.CharField(max_length=255)),
                ('kingdom', models.CharField(max_length=20)),
                ('groups', models.CharField(max_length=30)),
                ('subgroup', models.CharField(max_length=50)),
                ('biosample', models.CharField(max_length=15)),
                ('bioproject', models.CharField(max_length=15)),
                ('assembly_level', models.CharField(max_length=15)),
                ('assembly_accession', models.CharField(help_text='assembly accession in genbank', max_length=20)),
                ('download_accession', models.CharField(help_text='accession of used sequence file', max_length=20)),
                ('size', models.BigIntegerField()),
                ('gc_content', models.FloatField()),
                ('ns_count', models.IntegerField()),
                ('seq_count', models.IntegerField(help_text='number of sequences in fasta')),
                ('gene_count', models.IntegerField(help_text='number of genes')),
                ('download_link', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'genome',
            },
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('accession', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'sequence',
            },
        ),
        migrations.CreateModel(
            name='SSR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('motif', models.CharField(max_length=6)),
                ('standard_motif', models.CharField(max_length=6)),
                ('ssr_type', models.SmallIntegerField(choices=[(1, 'Mono'), (2, 'Di'), (3, 'Tri'), (4, 'Tetra'), (5, 'Penta'), (6, 'Hexa')])),
                ('repeats', models.IntegerField()),
                ('length', models.IntegerField()),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.Sequence')),
            ],
            options={
                'db_table': 'ssr',
            },
        ),
        migrations.CreateModel(
            name='SSRAnnot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.CharField(max_length=20)),
                ('gene_name', models.CharField(max_length=20)),
                ('location', models.SmallIntegerField(choices=[(1, 'CDS'), (2, 'exon'), (3, '3UTR'), (4, 'intron'), (5, '5UTR')])),
                ('ssr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.SSR')),
            ],
            options={
                'db_table': 'ssrannot',
            },
        ),
        migrations.CreateModel(
            name='SSRMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left_flank', models.CharField(max_length=100)),
                ('right_flank', models.CharField(max_length=100)),
                ('ssr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.SSR')),
            ],
            options={
                'db_table': 'ssrmeta',
            },
        ),
        migrations.CreateModel(
            name='SSRStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('val', models.FloatField()),
            ],
            options={
                'db_table': 'ssrstat',
            },
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssr_count', models.IntegerField()),
                ('mono_count', models.IntegerField()),
                ('di_count', models.IntegerField()),
                ('tri_count', models.IntegerField()),
                ('tetra_count', models.IntegerField()),
                ('penta_count', models.IntegerField()),
                ('hexa_count', models.IntegerField()),
                ('ssr_frequency', models.FloatField()),
                ('ssr_density', models.FloatField()),
                ('cover', models.FloatField()),
                ('cm_count', models.IntegerField()),
                ('cssr_count', models.IntegerField()),
                ('cssr_percent', models.FloatField()),
                ('cssr_frequency', models.FloatField()),
                ('cssr_density', models.FloatField()),
                ('genome', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.Genome')),
            ],
            options={
                'db_table': 'statistics',
            },
        ),
        migrations.AddField(
            model_name='cssr',
            name='sequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PanMicrosatDB.Sequence'),
        ),
    ]
